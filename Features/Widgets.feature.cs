// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace DemoQA_Automation.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("\'Widgets\' page test scenarios")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class WidgetsPageTestScenariosFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "\'Widgets\' page test scenarios", "This feature covers test scenarios for the \'Widgets\' page.", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Widgets.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
#line 5
 await testRunner.GivenAsync("Demo-QA web application is launched", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 6
 await testRunner.ThenAsync("ToolsQA homepage is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 7
 await testRunner.AndAsync("all expected UI cards are displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
 await testRunner.WhenAsync("selects Widgets card", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 9
 await testRunner.ThenAsync("widgets page is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widgets card test")]
        [NUnit.Framework.CategoryAttribute("WidgetsTest")]
        public async global::System.Threading.Tasks.Task WidgetsCardTest()
        {
            string[] tagsOfScenario = new string[] {
                    "WidgetsTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Widgets card test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 13
 await testRunner.ThenAsync("Widgets dropdown is open by default", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 14
 await testRunner.WhenAsync("user selects Widgets tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 15
 await testRunner.ThenAsync("Widgets dropdown is closed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widgets - Accordian test")]
        [NUnit.Framework.CategoryAttribute("WidgetsTest")]
        public async global::System.Threading.Tasks.Task Widgets_AccordianTest()
        {
            string[] tagsOfScenario = new string[] {
                    "WidgetsTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Widgets - Accordian test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 19
 await testRunner.WhenAsync("user selects Accordian sub-tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
 await testRunner.ThenAsync("accordian page is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
 await testRunner.AndAsync("only \'What is Lorem Ipsum?\' accordian section is open by default", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
 await testRunner.WhenAsync("user clicks on \'Where does it come from?\' accordion section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
 await testRunner.ThenAsync("only \'Where does it come from?\' accordian section is open", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
 await testRunner.WhenAsync("user clicks on \'Why do we use it?\' accordion section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
 await testRunner.ThenAsync("only \'Why do we use it?\' accordian section is open", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 26
 await testRunner.WhenAsync("user clicks on \'Why do we use it?\' accordion section", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
 await testRunner.ThenAsync("all accordian sections are closed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widgets - Auto Complete (multiple) test")]
        [NUnit.Framework.CategoryAttribute("WidgetsTest")]
        public async global::System.Threading.Tasks.Task Widgets_AutoCompleteMultipleTest()
        {
            string[] tagsOfScenario = new string[] {
                    "WidgetsTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Widgets - Auto Complete (multiple) test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 31
 await testRunner.WhenAsync("user selects Auto Complete sub-tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
 await testRunner.ThenAsync("auto-complete page is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
 await testRunner.GivenAsync("list created to store selected colors", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
 await testRunner.WhenAsync("user types \'R\' in the \'Type multiple color names\' input box", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
 await testRunner.ThenAsync("relevant correct colors are displayed in dropdown below", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 36
 await testRunner.WhenAsync("user selects \'Red\' color option", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 37
 await testRunner.ThenAsync("\'Red\' option is selected and displayed with its corresponding remove icon", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 38
 await testRunner.WhenAsync("user types \'R\' in the \'Type multiple color names\' input box again", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
 await testRunner.ThenAsync("relevant correct colors are displayed in dropdown below", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
 await testRunner.WhenAsync("user selects \'Purple\' color option", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
 await testRunner.ThenAsync("\'Purple\' option is selected and displayed with its corresponding remove icon", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
 await testRunner.AndAsync("previously selected \'Red\' option is still selected and displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
 await testRunner.WhenAsync("clicks on remove icon of \'Purple\' option", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
 await testRunner.WhenAsync("user types \'I\' in the \'Type multiple color names\' input box", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 45
 await testRunner.ThenAsync("relevant correct colors are displayed in dropdown below", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 46
 await testRunner.WhenAsync("user adds \'n\' in the existing text of \'Type multiple color names\' input box", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
 await testRunner.ThenAsync("relevant correct colors are displayed in dropdown below", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 48
 await testRunner.WhenAsync("user selects \'Indigo\' color option", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 49
 await testRunner.ThenAsync("\'Indigo\' option is selected and displayed with its corresponding remove icon", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 50
 await testRunner.WhenAsync("clicks on remove all icon", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 51
 await testRunner.ThenAsync("No color option will be selected and displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widgets - Date Picker test")]
        [NUnit.Framework.CategoryAttribute("WidgetsTest")]
        public async global::System.Threading.Tasks.Task Widgets_DatePickerTest()
        {
            string[] tagsOfScenario = new string[] {
                    "WidgetsTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Widgets - Date Picker test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 55
 await testRunner.WhenAsync("user selects Date Picker sub-tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 56
 await testRunner.ThenAsync("date-picker page is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 57
 await testRunner.WhenAsync("user opens the calendar for Select date", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
 await testRunner.AndAsync("selects year as \'1999\' from year dropdown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
 await testRunner.AndAsync("selects month as \'December\' and date as \'22\' from month dropdown", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 60
 await testRunner.ThenAsync("validate selected date is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
 await testRunner.WhenAsync("user selects date as \'September 28, 2012\' and time as \'11:45AM\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
 await testRunner.ThenAsync("validate selected date and time is as expected", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widgets - Slider test")]
        [NUnit.Framework.CategoryAttribute("WidgetsTest")]
        public async global::System.Threading.Tasks.Task Widgets_SliderTest()
        {
            string[] tagsOfScenario = new string[] {
                    "WidgetsTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Widgets - Slider test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 66
 await testRunner.WhenAsync("user selects Slider sub-tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 67
 await testRunner.ThenAsync("slider page is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 68
 await testRunner.AndAsync("slider is at 25 by default", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 69
 await testRunner.AndAsync("min max values are 0 and 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 70
 await testRunner.WhenAsync("user drags slider to 50", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
 await testRunner.ThenAsync("textbox and slider show value 50", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 72
 await testRunner.WhenAsync("user drags slider to 77", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
 await testRunner.ThenAsync("textbox and slider show value 77", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 74
 await testRunner.WhenAsync("user drags slider to 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 75
 await testRunner.ThenAsync("textbox and slider show value 100", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 76
 await testRunner.WhenAsync("user drags slider to 0", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 77
 await testRunner.ThenAsync("textbox and slider show value 0", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widgets - Tool tips test")]
        [NUnit.Framework.CategoryAttribute("WidgetsTest")]
        public async global::System.Threading.Tasks.Task Widgets_ToolTipsTest()
        {
            string[] tagsOfScenario = new string[] {
                    "WidgetsTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Widgets - Tool tips test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 81
 await testRunner.WhenAsync("user selects Tool Tips sub-tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 82
 await testRunner.ThenAsync("tool-tips page is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 83
 await testRunner.WhenAsync("user hovers on \'Hover me to see\' Button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 84
 await testRunner.ThenAsync("\'You hovered over the Button\' message for \'button\' tool tip is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 85
 await testRunner.WhenAsync("user hovers on \'Hover me\' Textbox", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 86
 await testRunner.ThenAsync("\'You hovered over the text field\' message for \'textField\' tool tip is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 87
 await testRunner.WhenAsync("user hovers on \'Contrary\' link", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 88
 await testRunner.ThenAsync("\'You hovered over the Contrary\' message for \'link\' tool tip is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widgets - Progress Bar test")]
        [NUnit.Framework.CategoryAttribute("WidgetsTest")]
        public async global::System.Threading.Tasks.Task Widgets_ProgressBarTest()
        {
            string[] tagsOfScenario = new string[] {
                    "WidgetsTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Widgets - Progress Bar test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 92
 await testRunner.WhenAsync("user selects Progress Bar sub-tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 93
 await testRunner.ThenAsync("progress-bar page is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 94
 await testRunner.AndAsync("Progress bar is displayed by default at 0%", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 95
 await testRunner.WhenAsync("clicks on Start button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 96
 await testRunner.ThenAsync("Stop button is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 97
 await testRunner.WhenAsync("clicks on Stop button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 98
 await testRunner.ThenAsync("Start button is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 99
 await testRunner.WhenAsync("clicks on Start button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 100
 await testRunner.AndAsync("wait till progress bar is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 101
 await testRunner.ThenAsync("validate progress bar reaches 100% and is success", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 102
 await testRunner.AndAsync("Reset button is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 103
 await testRunner.WhenAsync("clicks on Reset button", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 104
 await testRunner.ThenAsync("Progress bar resets to 0%", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 105
 await testRunner.AndAsync("Start button is available", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Widgets - Tabs test")]
        [NUnit.Framework.CategoryAttribute("WidgetsTest")]
        public async global::System.Threading.Tasks.Task Widgets_TabsTest()
        {
            string[] tagsOfScenario = new string[] {
                    "WidgetsTest"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Widgets - Tabs test", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
#line 109
 await testRunner.WhenAsync("user selects Tabs sub-tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 110
 await testRunner.ThenAsync("tabs page is displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 111
 await testRunner.AndAsync("verify all expected tabs are displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 112
 await testRunner.AndAsync("\'More\' tab is disabled", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 113
 await testRunner.AndAsync("\'What\' tab is in active state", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 114
 await testRunner.WhenAsync("user selects \'Origin\' tab from menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 115
 await testRunner.ThenAsync("\'Origin\' tab is in active state", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 116
 await testRunner.WhenAsync("user selects \'Use\' tab from menu", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 117
 await testRunner.ThenAsync("\'Use\' tab is in active state", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
